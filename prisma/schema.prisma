// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
    @@index([createdById])
}

// for baseball sim
model League {
    id           String @id
    name         String
    teamsJson    Json
    //teams      Team[]
    myTeamId     String
    myTeamName   String
    season       Int
    week         Int
    scheduleJson Json
    user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
    Team         Team[]

    @@index([userId])
}

// TODO: DO NOT CREATE DEFAULT IDs HERE!!!
model Team {
    id          String @id
    name        String
    gamesPlayed Int
    wins        Int
    playersJson Json
    //players     Player[]
    League      League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
    leagueId    String

    @@index([leagueId])
}

model Player {
    id           String @id
    name         String
    age          Int
    strength     Int
    strengthPot  Float
    speed        Int
    speedPot     Float
    precision    Int
    precisionPot Float
    contact      Int
    contactPot   Float
    class        String
    potential    Int
    experience   Int
    level        Int
    classExp     Int
    classLvl     Int
    focusStat    Int

    //Team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId String

    @@index([teamId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    League        League[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
